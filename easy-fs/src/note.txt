SOME CONSTANTS:
`BLOCK SIZE  = 512B
`INODE SIZE  = 128B
`DIRENT SIZE = 32B

|  superblock  |  inode bitmap  |  inode blocks  |  data block bitmap  |  data blocks |

-------------------------------------------------------------------------------------------------------------------
easy-fs crate 自下而上大致可以分成五个不同的层次：
1. 磁盘块设备接口层(block_dev.rs)：
    定义了以块大小为单位对磁盘块设备进行读写的trait接口
2. 块缓存层(block_cache.rs)：
    在内存中缓存磁盘块的数据，避免频繁读写磁盘
3. 磁盘数据结构层(layout.rs + bitmap.rs)：
    磁盘上的超级块、位图、索引节点、数据块、目录项等核心数据结构和相关处理
4. 磁盘块管理器层(elf.rs)：
    合并了上述核心数据结构和磁盘布局所形成的磁盘文件系统数据结构，以及基于这些结构的创建/打开文件系统的相关处理和磁盘块的分配和回收处理
5. 索引节点层(vfs.rs)：
    管理索引节点（即文件控制块）数据结构，并实现文件创建/文件打开/文件读写等成员函数来向上支持文件操作相关的系统调用
-------------------------------------------------------------------------------------------------------------------

在磁盘上的索引节点区域，每个块上都保存着若干个索引节点 DiskInode ：
pub struct DiskInode {
    pub size: u32,
    pub direct: [u32; INODE_DIRECT_COUNT],
    pub indirect1: u32,
    pub indirect2: u32,
    type_: DiskInodeType,
}

为了尽可能节约空间，在进行索引的时候，块的编号用一个 u32 存储。索引方式分成直接索引和间接索引两种：
当文件很小的时候，只需用到直接索引， direct 数组中最多可以指向 INODE_DIRECT_COUNT 个数据块，
当取值为 28 的时候，通过直接索引可以找到 [14KB] 的内容。当文件比较大的时候，不仅直接索引的 direct 数组装满，
还需要用到一级间接索引 indirect1 。它指向一个一级索引块，这个块也位于磁盘布局的数据块区域中。
这个一级索引块中的每个 u32 都用来指向数据块区域中一个保存该文件内容的数据块，因此，最多能够索引
512 / 4 = 128 个数据块，对应 [64KB] 的内容。

当文件大小超过直接索引和一级索引支持的容量上限 14 + 64 = [78KB] 的时候，就需要用到二级间接索引 indirect2。
它指向一个位于数据块区域中的二级索引块。二级索引块中的每个 u32 指向一个不同的一级索引块，
这些一级索引块也位于数据块区域中。因此，通过二级间接索引最多能够索引 128 * 64KB = 8MB 的内容。

为了充分利用空间，我们将 DiskInode 的大小设置为 128 字节，每个块正好能够容纳 4 个 DiskInode 。
在后续需要支持更多类型的元数据的时候，可以适当缩减直接索引 direct 的块数，并将节约出来的空间用来
存放其他元数据，仍可保证 DiskInode 的总大小为 128 字节。


目录的内容需要遵从一种特殊的格式。在我们的实现中，它可以看成一个[目录项的序列]，每个目录项都是一个二元组，
二元组的首个元素是目录下面的一个文件（或子目录）的文件名（或目录名），另一个元素则是文件（或子目录）所在的索引节点编号。
目录项相当于目录树结构上的子树节点，我们需要通过它来一级一级的找到实际要访问的文件或目录。目录项 DirEntry 的定义如下：

// easy-fs/src/layout.rs

const NAME_LENGTH_LIMIT: usize = 27;

#[repr(C)]
pub struct DirEntry {
    name: [u8; NAME_LENGTH_LIMIT + 1],
    inode_number: u32,
}

pub const DIRENT_SZ: usize = 32;



EasyFileSystem 实现了磁盘布局并能够将磁盘块有效的管理起来。但是对于文件系统的使用者而言，
他们往往不关心磁盘布局是如何实现的，而是更希望能够直接看到目录树结构中逻辑上的文件和目录。
为此需要设计索引节点 Inode 暴露给文件系统的使用者，让他们能够直接对文件和目录进行操作。 
Inode 和 DiskInode 的区别从它们的名字中就可以看出： DiskInode 放在磁盘块中比较固定的位置，
而 Inode 是放在内存中的记录文件索引节点信息的数据结构。