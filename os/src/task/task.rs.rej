diff a/os/src/task/task.rs b/os/src/task/task.rs	(rejected hunks)
@@ -17,23 +22,30 @@ pub struct TaskControlBlock {
     inner: UPSafeCell<TaskControlBlockInner>,
 }
 
+/// note: the `children` and `parent` members just keep a pointer.
+/// the true data is located in heap.
 pub struct TaskControlBlockInner {
+    // trap_cx_ppn is a little redundant. we could also find that
+    // by looking up pagetable, like: let trap_cx_ppn = pagetable.translate(TRAP_CONTEXT.into()).ppn
+    // here is just a space vs time tradeoff
     pub trap_cx_ppn: PhysPageNum,
+    /// 应用数据仅有可能出现在应用地址空间低于 base_size 字节的区域中. `init value = user_sp`
     pub base_size: usize,
     pub task_cx: TaskContext,
     pub task_status: TaskStatus,
     pub memory_set: MemorySet,
     pub parent: Option<Weak<TaskControlBlock>>,
     pub children: Vec<Arc<TaskControlBlock>>,
+    /// 当进程调用 exit 系统调用主动退出或者执行出错由内核终止的时候，
+    /// 它的退出码 exit_code 会被内核保存在它的任务控制块中，
+    /// 并等待它的父进程通过 waitpid 回收它的资源的同时也收集它的 PID 以及退出码
     pub exit_code: i32,
+    pub runtime_in_user: usize,
+    pub runtime_in_kernel: usize,
 }
 
 impl TaskControlBlockInner {
-    /*
-    pub fn get_task_cx_ptr2(&self) -> *const usize {
-        &self.task_cx_ptr as *const usize
-    }
-    */
+    /// return the trapframe's ppn
     pub fn get_trap_cx(&self) -> &'static mut TrapContext {
         self.trap_cx_ppn.get_mut()
     }
@@ -46,6 +58,12 @@ impl TaskControlBlockInner {
     pub fn is_zombie(&self) -> bool {
         self.get_status() == TaskStatus::Zombie
     }
+    pub fn increase_user_timer(&mut self, ms: usize){
+        self.runtime_in_user += ms;
+    }
+    pub fn increase_kernel_timer(&mut self, ms: usize){
+        self.runtime_in_kernel += ms;
+    }
 }
 
 impl TaskControlBlock {
@@ -64,6 +82,8 @@ impl TaskControlBlock {
         let kernel_stack = KernelStack::new(&pid_handle);
         let kernel_stack_top = kernel_stack.get_top();
         // push a task context which goes to trap_return to the top of kernel stack
+        // the task will go to execuating in `__restore` with its 
+        // carefully prepared init context
         let task_control_block = Self {
             pid: pid_handle,
             kernel_stack,
@@ -77,6 +97,8 @@ impl TaskControlBlock {
                     parent: None,
                     children: Vec::new(),
                     exit_code: 0,
+                    runtime_in_user: 0,
+                    runtime_in_kernel: 0,
                 })
             },
         };
@@ -118,6 +141,7 @@ impl TaskControlBlock {
         );
         // **** release inner automatically
     }
+    /// makes a copy and returns the child
     pub fn fork(self: &Arc<Self>) -> Arc<Self> {
         // ---- access parent PCB exclusively
         let mut parent_inner = self.inner_exclusive_access();
@@ -131,6 +155,7 @@ impl TaskControlBlock {
         let pid_handle = pid_alloc();
         let kernel_stack = KernelStack::new(&pid_handle);
         let kernel_stack_top = kernel_stack.get_top();
+        // alloc a tcb for child
         let task_control_block = Arc::new(TaskControlBlock {
             pid: pid_handle,
             kernel_stack,
@@ -144,6 +169,8 @@ impl TaskControlBlock {
                     parent: Some(Arc::downgrade(self)),
                     children: Vec::new(),
                     exit_code: 0,
+                    runtime_in_user: 0,
+                    runtime_in_kernel: 0,
                 })
             },
         });
@@ -153,14 +180,71 @@ impl TaskControlBlock {
         // **** access children PCB exclusively
         let trap_cx = task_control_block.inner_exclusive_access().get_trap_cx();
         trap_cx.kernel_sp = kernel_stack_top;
-        // return
+        // return the child
         task_control_block
         // ---- release parent PCB automatically
         // **** release children PCB automatically
     }
+    /// create a child to execuate the target process
+    pub fn spawn(self: &Arc<TaskControlBlock>, elf_data: &[u8]) -> Arc<TaskControlBlock> {
+        // copy user space(include trap context)
+        let (memory_set, user_sp, entry_point) = MemorySet::from_elf(elf_data);
+        let trap_cx_ppn = memory_set
+            .translate(VirtAddr::from(TRAP_CONTEXT).into())
+            .unwrap()
+            .ppn();
+        let mut parent_inner = self.inner_exclusive_access();
+        // alloc a pid and a kernel stack in kernel space
+        let pid_handle = pid_alloc();
+        let kernel_stack = KernelStack::new(&pid_handle);
+        let kernel_stack_top = kernel_stack.get_top();
+        // push a goto_trap_return task_cx on the top of kernel stack
+        let task_control_block = Arc::new(TaskControlBlock {
+            pid: pid_handle,
+            kernel_stack,
+            inner: unsafe{
+                UPSafeCell::new(TaskControlBlockInner {
+                    trap_cx_ppn,
+                    base_size: user_sp,
+                    task_status: TaskStatus::Ready,
+                    memory_set,
+                    parent: Some(Arc::downgrade(self)),
+                    children: Vec::new(),
+                    exit_code: 0,
+                    runtime_in_kernel: 0,
+                    runtime_in_user: 0,
+                    task_cx: TaskContext::goto_trap_return(kernel_stack_top),
+            })
+            },
+        });
+        // add child
+        parent_inner.children.push(task_control_block.clone());
+        // modify kernel_sp in trap_cx
+        // **** acquire child PCB lock
+        let trap_cx = task_control_block.inner_exclusive_access().get_trap_cx();
+        // **** release child PCB lock
+        *trap_cx = TrapContext::app_init_context(
+            entry_point,
+            user_sp,
+            KERNEL_SPACE.exclusive_access().token(),
+            kernel_stack_top,
+            trap_handler as usize,
+        );
+        // return
+        task_control_block
+        // ---- release parent PCB lock
+}
+
     pub fn getpid(&self) -> usize {
         self.pid.0
     }
+    pub fn show_timer_before_exit(&self){
+        let utimer = self.inner_exclusive_access().runtime_in_user;
+        let ktimer = self.inner_exclusive_access().runtime_in_kernel;
+        debug!(" pid = {} exited. runtime: {}ms(user) {}ms(kernel)",
+            self.pid.0, utimer, ktimer
+        );
+    }
 }
 
 #[derive(Copy, Clone, PartialEq)]
